## 	Rubriks:	
	Each of the following is worth 5 points, with 3 points allocated for each branch/ commit 
	and 2 points awarded for a correct query.
	
	Committed and Pushed 7 branches or changes: 40 points
	Committed and Pushed 6 branches or changes: 30 points
	Committed and Pushed 4 to 5 branches or changes: 20 points
	Committed and Pushed 1 to 3 branches or changes: 10 point
	No committed and pushed branch: 0 point

##	Write the SQL query in the "hero sql" section below the specified requirement in the file.

/*1.	Create a new branch named "feat/create-tables"

	Add the provided SQL code line to your "hero.sql" file. 
	(Refer to the sample output below for the syntax of creating six tables.)*/

/*2.	Create new branch named "feat/insert-data

	Add the provided SQL code line to your "hero.sql" file. 
	(Refer to the sample output below for the syntax of populating data for six tables.)*/	

/*3.	Create new branch named "feat/add-column-price"

	Add another column in the item table named item_price.
	Set the column Price data type to Decimal with 2 decimal points.*/

/*4	Create new branch named "feat/update-delete-inactive"

	Update the state of hero 1 to inactive.
	Delete the item associated with hero 1.*/

/*5	Create new branch named "feat/select-active-players"
	
	List the player names and their corresponding hero names that are actively in
	use during gameplay, excluding those with inactive heroes.*/
	
/*6	Create new branch named "feat/select-heroes-archers"

	Provide a list of heroes classified as archers.*/
	
/*7 	Create new branch named "feat/select-avg-playerlevel-per-class"

	Retrieve the average player level for each class,
	arranging them in descending order from the highest level to the lowest.*/

/*8	Push the local repository to the remote repository on GitHub*/


--	Sample Output of hero.sql:

CREATE DATABASE hero001

--1.	Create new branch named "feat/create-tables"

CREATE TABLE IF NOT EXISTS public.class
(
    class_id integer NOT NULL,
    class_name character varying(255) NOT NULL,
    class_description text,
    PRIMARY KEY (class_id)
);

CREATE TABLE IF NOT EXISTS public.item
(
    item_id integer NOT NULL,
    item_name character varying(255) NOT NULL,
    item_description text,
    item_type character varying(50),
    PRIMARY KEY (item_id)
);

CREATE TABLE IF NOT EXISTS public.hero
(
    hero_id integer NOT NULL,
    hero_name character varying(255) NOT NULL,
    class_id integer,
    is_active boolean,
    PRIMARY KEY (hero_id),
    FOREIGN KEY (class_id) REFERENCES class(class_id)
);

CREATE TABLE IF NOT EXISTS public.heroitem
(
    hero_item_id integer NOT NULL,
    hero_id integer,
    item_id integer,
    PRIMARY KEY (hero_item_id),
    FOREIGN KEY (hero_id) REFERENCES hero(hero_id),
    FOREIGN KEY (item_id) REFERENCES item(item_id)
);

CREATE TABLE IF NOT EXISTS public.player
(
    player_id integer NOT NULL,
    player_name character varying(255) NOT NULL,
    player_level integer,
    player_experience integer,
    hero_id integer,
    PRIMARY KEY (player_id),
    FOREIGN KEY (hero_id) REFERENCES hero(hero_id)
);

CREATE TABLE IF NOT EXISTS public.skills
(
    skill_id integer NOT NULL,
    skill_name character varying(255) NOT NULL,
    skill_description text,
    class_id integer,
    PRIMARY KEY (skill_id),
	FOREIGN KEY (class_id) REFERENCES class(class_id)
);

CREATE TABLE IF NOT EXISTS public.HeroItem 
(
    hero_item_id INT PRIMARY KEY,
    hero_id INT,
    item_id INT,
    FOREIGN KEY (hero_id) REFERENCES Hero(hero_id),
    FOREIGN KEY (item_id) REFERENCES Item(item_id)
);


